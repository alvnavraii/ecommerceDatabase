-- Primero renombramos la tabla actual para no perder datos
ALTER TABLE ADDRESSES RENAME TO ADDRESSES_OLD;

-- Creamos la nueva tabla con la estructura actualizada
CREATE TABLE ADDRESSES (
    ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    USER_ID NUMBER,
    ADDRESS CLOB NOT NULL,
    MUNICIPALITY_ID NUMBER NOT NULL,
    POSTAL_CODE VARCHAR2(5) NOT NULL,
    IS_DEFAULT NUMBER(1) NOT NULL,
    IS_ACTIVE NUMBER(1) DEFAULT 1 NOT NULL,
    CREATED_AT TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATED_AT TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CREATED_BY VARCHAR2(50) NOT NULL,
    UPDATED_BY VARCHAR2(50) NOT NULL,
    CONSTRAINT PK_ADDRESSES PRIMARY KEY (ID),
    CONSTRAINT FK_ADDRESSES_USER FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    CONSTRAINT FK_ADDRESSES_MUNICIPALITY FOREIGN KEY (MUNICIPALITY_ID) REFERENCES MUNICIPALITIES(ID)
);

-- Migramos los datos (esto requerirá ajuste manual ya que hay que mapear las ciudades a municipios)
-- INSERT INTO ADDRESSES (
--     USER_ID, 
--     ADDRESS, 
--     MUNICIPALITY_ID,
--     POSTAL_CODE,
--     IS_DEFAULT,
--     IS_ACTIVE,
--     CREATED_AT,
--     UPDATED_AT,
--     CREATED_BY,
--     UPDATED_BY
-- )
-- SELECT 
--     USER_ID,
--     ADDRESS_LINE1 || CASE 
--         WHEN ADDRESS_LINE2 IS NOT NULL THEN CHR(10) || ADDRESS_LINE2 
--         ELSE '' 
--     END,
--     (SELECT ID FROM MUNICIPALITIES WHERE NAME = CITY), -- Esto necesitará ajuste manual
--     POSTAL_CODE,
--     IS_DEFAULT,
--     1,
--     CREATED_AT,
--     UPDATED_AT,
--     CREATED_BY,
--     UPDATED_BY
-- FROM ADDRESSES_OLD;

-- Una vez verificada la migración, podemos eliminar la tabla antigua
-- DROP TABLE ADDRESSES_OLD;

COMMIT;
